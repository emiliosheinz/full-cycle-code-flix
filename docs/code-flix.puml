@startuml context
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
AddRelTag("async", $lineStyle = DashedLine())
SHOW_PERSON_PORTRAIT()

title "Codeflix"
Person(catalog_admin,"Catalog Administrator","Manages the video catalog and its categories")
Person(subscriber_admin,"Subscriber Administrator","Manages the system subscribers and subscription plans")
Person(subscriber,"Platform Subscriber","Subscribes to the platform to access videos")

System_Boundary(gateway, "Codeflix") {
    Container(catalog_admin_frontend,"Frontend: Video Catalog Admin","React","SPA that manages videos, including categories and genres")
    Container(catalog_admin_backend,"Backend: Video Catalog Admin","Any Language","Manages the video catalog, including categories and genres")
    Container(catalog_admin_backend_database,"Video Catalog Admin Database","MySQL","Stores video catalog data")
    Rel(catalog_admin_frontend,catalog_admin_backend,"Interacts with via","HTTPS/JSON")
    Rel(catalog_admin_backend,catalog_admin_backend_database,"Interacts with using","TCP")
    
    Container(encoder,"Video Encoder","Go","Encodes videos to mpeg-dash")
    Container(encoded_videos_bucket,"Encoded Videos Storage Bucket","GCP")
    Container(raw_videos_bucket,"Raw Videos Storage Bucket","GCP")
    Rel(encoder,encoded_videos_bucket,"Uploads converted video via","HTTPS")
    Rel(encoder,raw_videos_bucket,"Downloads raw video via","HTTPS")
    Rel(catalog_admin_backend,raw_videos_bucket,"Uploads raw video via","HTTPS")

    Rel(encoder,catalog_admin_backend,"Consumes newly created video data via","RabbitMQ Queue videos.new",$tags = "async")
    Rel(encoder, catalog_admin_backend,"Publishes that video was converted via","RabbitMQ Queue videos.converted",$tags = "async")
    Rel(catalog_admin_backend, encoder,"Consumes converted video data via","RabbitMQ Queue videos.converted",$tags = "async")
    Rel(catalog_admin_backend, encoder,"Publishes that new video was sent to raw bucket via","RabbitMQ Queue videos.new",$tags = "async")

    Container(catalog_frontend,"Video Catalog Frontend","React","Provides navigation and playback of videos for subscribers")
    Container(catalog_api,"Video Catalog API","Any Language","Provides endpoints for video navigation and playback")
    Container(catalog_api_database,"API Database","Elasticsearch","Stores data of videos, genres, cast members, and categories")
    Container(kafka,"Apache Kafka","Message Broker","Stores and serves data from Kafka Connect")
    Container(kafka_connect,"Kafka Connect","Data Integration","Service for replicating catalog data")
    Rel(catalog_api,catalog_api_database,"Interacts with via","HTTPS/JSON")
    Rel(kafka_connect,catalog_api_database,"Sends catalog data via","Elasticsearch Sink",$tags = "async")
    Rel(kafka_connect,catalog_admin_backend_database,"Copies data using connector","Debezium MySQL",$tags = "async")
    Rel(kafka_connect,kafka,"Interacts with via","Kafka Protocol",$tags = "async")

    Container(subscription,"Any Language","Subscription","Manages subscriber plans and subscriptions")
    Container(subscription_postgres,"Subscription Database","Postgres","Stores subscriber and subscription plan data")
    Rel(subscription,subscription_postgres,"Interacts with via","Postgres Protocol")

    Container(keycloak,"Keycloak","Identity Service","Authenticates all platform users")

    Rel(catalog_admin,catalog_admin_frontend,"Interacts with via","HTTPS")
    
    Rel(subscriber,subscription,"Interacts with via","HTTPS")
    Rel(subscriber,keycloak,"Interacts with via","HTTPS")
    Rel(subscription,keycloak,"Interacts with via","HTTPS")

    Rel(catalog_admin_frontend,keycloak,"Authenticates with","HTTPS")

    Rel(subscriber,catalog_frontend,"Interacts with via","HTTPS")
    Rel(catalog_frontend,catalog_api,"Interacts with via","HTTPS/JSON")

    Rel(subscriber_admin,subscription,"Interacts with","HTTPS")
}
@enduml
